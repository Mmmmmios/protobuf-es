// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.8.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file extra/edition2023-proto3.proto (package spec, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum spec.Proto3EnumForEdition2023
 */
export enum Proto3EnumForEdition2023 {
  /**
   * @generated from enum value: PROTO3_ENUM_FOR_EDITION2023_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROTO3_ENUM_FOR_EDITION2023_A = 1;
   */
  A = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Proto3EnumForEdition2023)
proto3.util.setEnumType(Proto3EnumForEdition2023, "spec.Proto3EnumForEdition2023", [
  { no: 0, name: "PROTO3_ENUM_FOR_EDITION2023_UNSPECIFIED" },
  { no: 1, name: "PROTO3_ENUM_FOR_EDITION2023_A" },
]);

/**
 * see edition2023.proto
 *
 * @generated from message spec.Proto3MessageForEdition2023
 */
export class Proto3MessageForEdition2023 extends Message<Proto3MessageForEdition2023> {
  /**
   * @generated from field: bool implicit_bool_field = 1;
   */
  implicitBoolField = false;

  /**
   * @generated from field: spec.Proto3EnumForEdition2023 implicit_open_enum_field = 2;
   */
  implicitOpenEnumField = Proto3EnumForEdition2023.UNSPECIFIED;

  /**
   * @generated from field: optional bool explicit_bool_field = 5;
   */
  explicitBoolField?: boolean;

  /**
   * @generated from field: optional spec.Proto3EnumForEdition2023 explicit_open_enum_field = 6;
   */
  explicitOpenEnumField?: Proto3EnumForEdition2023;

  /**
   * @generated from field: repeated double packed_double_field = 9 [packed = true];
   */
  packedDoubleField: number[] = [];

  /**
   * @generated from field: repeated double unpacked_double_field = 10 [packed = false];
   */
  unpackedDoubleField: number[] = [];

  constructor(data?: PartialMessage<Proto3MessageForEdition2023>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "spec.Proto3MessageForEdition2023";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "implicit_bool_field", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "implicit_open_enum_field", kind: "enum", T: proto3.getEnumType(Proto3EnumForEdition2023) },
    { no: 5, name: "explicit_bool_field", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "explicit_open_enum_field", kind: "enum", T: proto3.getEnumType(Proto3EnumForEdition2023), opt: true },
    { no: 9, name: "packed_double_field", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 10, name: "unpacked_double_field", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true, packed: false },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proto3MessageForEdition2023 {
    return new Proto3MessageForEdition2023().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proto3MessageForEdition2023 {
    return new Proto3MessageForEdition2023().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proto3MessageForEdition2023 {
    return new Proto3MessageForEdition2023().fromJsonString(jsonString, options);
  }

  static equals(a: Proto3MessageForEdition2023 | PlainMessage<Proto3MessageForEdition2023> | undefined, b: Proto3MessageForEdition2023 | PlainMessage<Proto3MessageForEdition2023> | undefined): boolean {
    return proto3.util.equals(Proto3MessageForEdition2023, a, b);
  }
}

